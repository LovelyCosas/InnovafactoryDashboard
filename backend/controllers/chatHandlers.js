// Clase base para los manejadores
class ChatHandler {
    constructor() {
        this.nextHandler = null;
    }

    setNext(handler) {
        this.nextHandler = handler;
        return handler;
    }

    handle(question, readings) {
        if (this.nextHandler) {
            return this.nextHandler.handle(question, readings);
        }
        return null;
    }

    formatResponse(title, content) {
        // Agregamos emojis y formato mejorado
        return `üìä ${title}\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n${content}`;
    }
}

// Manejador para consultas de sensores espec√≠ficos
class SpecificSensorHandler extends ChatHandler {
    handle(question, readings) {
        const sensorMatch = question.match(/(vib|temp|hum)_(\d{2})/i);
        if (!sensorMatch) {
            return super.handle(question, readings);
        }

        const sensorId = sensorMatch[0].replace(/vib/i, 'Vib')
                                     .replace(/temp/i, 'Temp')
                                     .replace(/hum/i, 'Hum');
        const sensor = readings.find(r => r.sensor_id === sensorId);
        
        if (!sensor) {
            return `[!] SENSOR NO ENCONTRADO
--------------------
- Sensor ${sensorId} no disponible
- Verificar ID del sensor
- Comprobar conexi√≥n`;
        }

        const value = sensor.value.toFixed(sensor.unit === 'm/s¬≤' ? 2 : 1);
        let status = '‚úÖ NORMAL';
        let recommendations = [];

        if (sensor.unit === 'm/s¬≤') {
            if (value > 0.9) {
                status = '‚ùå CRITICO';
                recommendations = [
                    '1. Parada inmediata requerida',
                    '2. Inspeccionar rodamientos',
                    '3. Verificar alineaci√≥n'
                ];
            } else if (value > 0.7) {
                status = '‚ö†Ô∏è ALERTA';
                recommendations = [
                    '1. Reducir velocidad operativa',
                    '2. Aumentar monitoreo',
                    '3. Planificar mantenimiento'
                ];
            }
        } else if (sensor.unit === '¬∞C') {
            if (value > 85) {
                status = '‚ùå CRITICO';
                recommendations = [
                    '1. Reducir carga inmediatamente',
                    '2. Verificar refrigeraci√≥n',
                    '3. Preparar parada si persiste'
                ];
            } else if (value > 75) {
                status = '‚ö†Ô∏è ALERTA';
                recommendations = [
                    '1. Aumentar ventilaci√≥n',
                    '2. Verificar temperatura',
                    '3. Monitorear tendencia'
                ];
            }
        } else if (sensor.unit === '%') {
            if (value > 60) {
                status = '‚ùå CRITICO ALTO';
                recommendations = [
                    '1. Activar deshumidificaci√≥n',
                    '2. Aumentar ventilaci√≥n',
                    '3. Verificar sellos'
                ];
            } else if (value < 35) {
                status = '‚ùå CRITICO BAJO';
                recommendations = [
                    '1. Activar humidificadores',
                    '2. Reducir ventilaci√≥n',
                    '3. Verificar sellos'
                ];
            }
        }

        let response = `ESTADO ${sensorId}
--------------------
- Valor: ${value} ${sensor.unit}
- Estado: ${status}
- Zona: ${sensor.zone}`;

        if (recommendations.length > 0) {
            response += `\n\n[!] ACCIONES REQUERIDAS\n${recommendations.join('\n')}`;
        } else {
            response += `\n\n[OK] OPERACION NORMAL
- Continuar monitoreo regular
- Mantener mantenimiento preventivo`;
        }

        return response;
    }
}

// Manejador para consultas de temperatura
class TemperatureHandler extends ChatHandler {
    handle(question, readings) {
        if (!question.match(/temperatura|temp\b/i)) {
            return super.handle(question, readings);
        }

        const tempSensors = readings.filter(r => r.unit === '¬∞C' && r.sensor_id.endsWith('01'));
        if (tempSensors.length === 0) {
            return 'TEMPERATURA\n--------------------\n‚ùå No hay sensores de temperatura disponibles';
        }

        let response = 'TEMPERATURA\n--------------------\n\n';
        
        tempSensors.forEach(sensor => {
            const value = sensor.value.toFixed(1);
            let status, recommendations = '';
            
            if (value > 85) {
                status = '‚ùå CR√çTICO';
                recommendations = '\nAcciones requeridas:\n- Reducir carga\n- Verificar refrigeraci√≥n\n- Preparar parada';
            } else if (value > 75) {
                status = '‚ö†Ô∏è ALERTA';
                recommendations = '\nRecomendaciones:\n- Aumentar ventilaci√≥n\n- Monitorear tendencia';
            } else {
                status = '‚úÖ NORMAL';
            }
            
            response += `${sensor.sensor_id}: ${value}¬∞C\nEstado: ${status}${recommendations}\n\n`;
        });

        return response;
    }
}

// Manejador para consultas de vibraci√≥n
class VibrationHandler extends ChatHandler {
    handle(question, readings) {
        if (!question.match(/vibracion|vibraciones|vib\b/i)) {
            return super.handle(question, readings);
        }

        const vibSensors = readings.filter(r => r.unit === 'm/s¬≤' && r.sensor_id.endsWith('01'));
        if (vibSensors.length === 0) {
            return this.formatResponse('‚ùå SIN DATOS',
                'No hay sensores de vibraci√≥n disponibles');
        }

        let content = 'üìä EVALUACI√ìN GENERAL\n\n';
        
        content += vibSensors.map(sensor => {
            const value = sensor.value.toFixed(2);
            let status, icon;
            if (value > 0.9) {
                status = 'CR√çTICO';
                icon = 'üî¥';
            } else if (value > 0.7) {
                status = 'ALERTA';
                icon = '‚ö†Ô∏è';
            } else {
                status = 'NORMAL';
                icon = '‚úÖ';
            }
            return `${icon} ${sensor.sensor_id}: ${value} m/s¬≤\nEstado: ${status}`;
        }).join('\n\n');

        return content;
    }
}

// Manejador para consultas de humedad
class HumidityHandler extends ChatHandler {
    handle(question, readings) {
        if (!question.match(/humedad|hum\b/i)) {
            return super.handle(question, readings);
        }

        const humSensors = readings.filter(r => r.unit === '%');
        if (humSensors.length === 0) {
            return this.formatResponse('‚ùå SIN DATOS',
                'No hay sensores de humedad disponibles');
        }

        let content = humSensors.map(sensor => {
            const value = sensor.value.toFixed(1);
            const status = value > 60 || value < 35 ? '‚ùå' : '‚úÖ';
            return `${status} ${sensor.sensor_id}: ${value}%`;
        }).join('\n');

        return this.formatResponse('üíß HUMEDAD', content);
    }
}

// Manejador para consultas de alertas
class AlertHandler extends ChatHandler {
    handle(question, readings) {
        if (!question.match(/alerta|alertas|problema|problemas/i)) {
            return super.handle(question, readings);
        }

        const alerts = readings.filter(sensor => {
            const value = sensor.value;
            return (sensor.unit === '¬∞C' && value > 75) ||
                   (sensor.unit === 'm/s¬≤' && value > 0.7) ||
                   (sensor.unit === '%' && (value > 60 || value < 35));
        });

        if (alerts.length === 0) {
            return this.formatResponse('‚úÖ ESTADO NORMAL',
                'No hay alertas activas en este momento\n' +
                '‚Ä¢ Todos los sensores en rango normal\n' +
                '‚Ä¢ Monitoreo continuo activo');
        }

        let content = alerts.map(sensor => {
            const value = sensor.value.toFixed(sensor.unit === 'm/s¬≤' ? 2 : 1);
            const status = this.getAlertStatus(sensor);
            return `${status.icon} ${sensor.sensor_id}: ${value} ${sensor.unit}\n` +
                   `   ‚Ü≥ ${status.message}`;
        }).join('\n\n');

        return this.formatResponse('‚ö†Ô∏è ALERTAS ACTIVAS', content);
    }

    getAlertStatus(sensor) {
        if (sensor.unit === '¬∞C') {
            return sensor.value > 85 ? 
                   { icon: '‚ùå', message: 'Temperatura cr√≠tica - Revisar refrigeraci√≥n' } :
                   { icon: '‚ö†Ô∏è', message: 'Temperatura alta - Aumentar ventilaci√≥n' };
        }
        if (sensor.unit === 'm/s¬≤') {
            return sensor.value > 0.9 ?
                   { icon: '‚ùå', message: 'Vibraci√≥n cr√≠tica - Parada inmediata' } :
                   { icon: '‚ö†Ô∏è', message: 'Vibraci√≥n alta - Reducir velocidad' };
        }
        if (sensor.unit === '%') {
            return sensor.value > 60 ?
                   { icon: '‚ùå', message: 'Humedad alta - Activar deshumidificaci√≥n' } :
                   { icon: '‚ùå', message: 'Humedad baja - Activar humidificaci√≥n' };
        }
    }
}

// Manejador para consultas de estado general
class StatusHandler extends ChatHandler {
    handle(question, readings) {
        if (!question.match(/estado|como esta|c√≥mo est√°/i)) {
            return super.handle(question, readings);
        }

        let content = '';
        let criticalCount = 0;
        let warningCount = 0;
        let normalCount = 0;

        // Agrupar sensores por tipo
        const types = {
            '¬∞C': { icon: 'üå°Ô∏è', name: 'TEMPERATURAS', sensors: [] },
            'm/s¬≤': { icon: 'üí´', name: 'VIBRACIONES', sensors: [] },
            '%': { icon: 'üíß', name: 'HUMEDAD', sensors: [] }
        };

        // Clasificar sensores
        readings.forEach(sensor => {
            if (types[sensor.unit]) {
                types[sensor.unit].sensors.push(sensor);
                
                // Determinar estado
                if (sensor.unit === '¬∞C') {
                    if (sensor.value > 85) criticalCount++;
                    else if (sensor.value > 75) warningCount++;
                    else normalCount++;
                }
                else if (sensor.unit === 'm/s¬≤') {
                    if (sensor.value > 0.9) criticalCount++;
                    else if (sensor.value > 0.7) warningCount++;
                    else normalCount++;
                }
                else if (sensor.unit === '%') {
                    if (sensor.value > 60 || sensor.value < 35) criticalCount++;
                    else normalCount++;
                }
            }
        });

        // Generar reporte por tipo
        Object.values(types).forEach(type => {
            if (type.sensors.length > 0) {
                content += `${type.icon} ${type.name}\n`;
                type.sensors.forEach(sensor => {
                    let statusIcon = '‚úÖ';
                    if (sensor.unit === '¬∞C') {
                        if (sensor.value > 85) statusIcon = '‚ùå';
                        else if (sensor.value > 75) statusIcon = '‚ö†Ô∏è';
                    }
                    else if (sensor.unit === 'm/s¬≤') {
                        if (sensor.value > 0.9) statusIcon = '‚ùå';
                        else if (sensor.value > 0.7) statusIcon = '‚ö†Ô∏è';
                    }
                    else if (sensor.unit === '%') {
                        if (sensor.value > 60 || sensor.value < 35) statusIcon = '‚ùå';
                    }
                    
                    const value = sensor.value.toFixed(sensor.unit === 'm/s¬≤' ? 2 : 1);
                    content += `${statusIcon} ${sensor.sensor_id}: ${value} ${sensor.unit}\n`;
                });
                content += '\n';
            }
        });

        // A√±adir resumen
        content += `üìã RESUMEN\n`;
        content += `‚Ä¢ Total sensores: ${readings.length}\n`;
        if (criticalCount > 0) {
            content += `‚Ä¢ Cr√≠ticos: ${criticalCount} üö®\n`;
            content += `‚Ä¢ Alertas: ${warningCount} ‚ö†Ô∏è\n`;
            content += `‚Ä¢ Normales: ${normalCount} ‚úÖ\n\n`;
            content += `‚ùó ACCIONES REQUERIDAS\n`;
            content += `‚Ä¢ Revisar sensores cr√≠ticos\n`;
            content += `‚Ä¢ Preparar mantenimiento\n`;
            content += `‚Ä¢ Monitorear tendencias`;
        } else if (warningCount > 0) {
            content += `‚Ä¢ Alertas: ${warningCount} ‚ö†Ô∏è\n`;
            content += `‚Ä¢ Normales: ${normalCount} ‚úÖ\n\n`;
            content += `‚ö†Ô∏è RECOMENDACIONES\n`;
            content += `‚Ä¢ Aumentar monitoreo\n`;
            content += `‚Ä¢ Planificar revisi√≥n`;
        } else {
            content += `‚Ä¢ Normales: ${normalCount} ‚úÖ\n\n`;
            content += `‚úÖ SISTEMA ESTABLE\n`;
            content += `‚Ä¢ Operaci√≥n normal\n`;
            content += `‚Ä¢ Continuar monitoreo`;
        }

        return this.formatResponse('üìä ESTADO DEL SISTEMA', content);
    }
}

// Manejador para preguntas frecuentes
class FAQHandler extends ChatHandler {
    handle(question, readings) {
        const normalizedQuestion = this.normalizeQuestion(question);
        const response = this.getFAQResponse(normalizedQuestion, readings);
        
        if (response) {
            return response;
        }
        
        return super.handle(question, readings);
    }

    normalizeQuestion(question) {
        return question
            .toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "")
            .replace(/[^a-z0-9\s]/g, '');
    }

    getFAQResponse(question, readings) {
        // Consulta de rangos normales
        if (question.match(/rango.*normal|valor.*normal|valor.*aceptable|rango.*ideal/)) {
            return `RANGOS ACEPTABLES
--------------------

VIBRACI√ìN
‚úÖ 0.0 - 0.7 m/s¬≤

TEMPERATURA
‚úÖ 20 - 75 ¬∞C

HUMEDAD
‚úÖ 35 - 60 %`;
        }

        // Revisi√≥n de vibraci√≥n alta
        if (question.match(/revisar.*vib.*|que.*revisar.*vib.*|check.*vib.*/)) {
            return `PROTOCOLO DE REVISI√ìN - VIBRACI√ìN
--------------------

1. INSPECCI√ìN INMEDIATA
- Rodamientos
- Alineaci√≥n
- Balanceo

2. MEDICIONES
- Espectro de vibraci√≥n
- Temperatura de cojinetes
- Consumo de energ√≠a

3. VERIFICACIONES
- Estado de lubricaci√≥n
- Pernos de anclaje
- Acoplamientos

‚ùó Si vibraci√≥n > 0.9 m/s¬≤:
‚Ä¢ Parada inmediata requerida
‚Ä¢ Inspecci√≥n completa
‚Ä¢ Mantenimiento correctivo`;
        }

        // Revisi√≥n de humedad por zona
        if (question.match(/revisar.*hum.*zona|check.*hum.*zona|como.*revisar.*hum/)) {
            return `PROTOCOLO DE REVISI√ìN - HUMEDAD
--------------------

1. VERIFICACIONES IN SITU
- Sensor de humedad
- Fugas de aire/agua
- Condensaci√≥n visible

2. MEDICIONES
- Humedad relativa
- Temperatura ambiente
- Flujo de aire

3. INSPECCI√ìN DE SISTEMAS
- Estado del HVAC
- Sellos y juntas
- Ventilaci√≥n

‚ùó RANGOS POR ZONA:
‚Ä¢ Zona A: 40-55%
‚Ä¢ Zona B: 35-50%
‚Ä¢ Zona C: 45-60%`;
        }

        // Sensores fuera de rango
        if (question.match(/fuera.*rango|sensor.*fuera|valor.*fuera/)) {
            return `PROTOCOLO - SENSORES FUERA DE RANGO
--------------------

1. ACCIONES INMEDIATAS
- Verificar lectura
- Confirmar calibraci√≥n
- Revisar hist√≥rico

2. EVALUACI√ìN
- Identificar tendencia
- Verificar causas
- Documentar hallazgos

3. ACCIONES CORRECTIVAS
- Ajustar par√°metros
- Realizar mantenimiento
- Calibrar sensores

‚ùó PRIORIDADES:
‚Ä¢ CR√çTICO (‚ùå): Acci√≥n inmediata
‚Ä¢ ALERTA (‚ö†Ô∏è): 24 horas m√°x.
‚Ä¢ REVISI√ìN (‚ÑπÔ∏è): Siguiente turno`;
        }

        // Sensor defectuoso o mal funcionamiento
        if (question.match(/sensor.*mal|sensor.*defectuoso|sensor.*falla|sensor.*error/)) {
            return `PROTOCOLO - SENSOR DEFECTUOSO
--------------------

1. DIAGN√ìSTICO INICIAL
- Verificar alimentaci√≥n el√©ctrica
- Comprobar conexiones
- Revisar configuraci√≥n

2. VERIFICACIONES
- Comparar con sensores cercanos
- Analizar hist√≥rico de lecturas
- Realizar prueba de calibraci√≥n

3. ACCIONES CORRECTIVAS
- Recalibrar si es posible
- Limpiar/reparar sensor
- Reemplazar si necesario

4. DOCUMENTACI√ìN
- Registrar incidente
- Documentar acciones tomadas
- Actualizar historial

‚ùó IMPORTANTE:
‚Ä¢ No ignorar lecturas err√°ticas
‚Ä¢ Mantener sensor redundante
‚Ä¢ Validar despu√©s de reparaci√≥n`;
        }

        // Problemas espec√≠ficos
        if (question.match(/impacto.*vibra|efecto.*vibra/)) {
            return this.formatResponse('‚ö†Ô∏è IMPACTO DE VIBRACIONES ALTAS',
                'üîπ EFECTOS INMEDIATOS\n' +
                '‚Ä¢ Desgaste acelerado de rodamientos\n' +
                '‚Ä¢ P√©rdida de alineaci√≥n\n' +
                '‚Ä¢ Aflojamiento de componentes\n\n' +
                'üîπ DA√ëOS A LARGO PLAZO\n' +
                '‚Ä¢ Fatiga de materiales\n' +
                '‚Ä¢ Fallo de rodamientos\n' +
                '‚Ä¢ Da√±o estructural\n\n' +
                'üîπ IMPACTO OPERATIVO\n' +
                '‚Ä¢ Mayor consumo de energ√≠a\n' +
                '‚Ä¢ Reducci√≥n de vida √∫til\n' +
                '‚Ä¢ Paradas no programadas');
        }

        if (question.match(/problema.*90.*c|efecto.*90.*c/)) {
            return this.formatResponse('‚ö†Ô∏è IMPACTO DE TEMPERATURA ALTA (90¬∞C)',
                'üîπ EFECTOS INMEDIATOS\n' +
                '‚Ä¢ Degradaci√≥n de lubricantes\n' +
                '‚Ä¢ Expansi√≥n t√©rmica excesiva\n' +
                '‚Ä¢ Estr√©s en materiales\n\n' +
                'üîπ DA√ëOS POTENCIALES\n' +
                '‚Ä¢ Deformaci√≥n permanente\n' +
                '‚Ä¢ Fallo de componentes\n' +
                '‚Ä¢ Riesgo de incendio\n\n' +
                'üîπ ACCIONES NECESARIAS\n' +
                '‚Ä¢ Parada inmediata\n' +
                '‚Ä¢ Inspecci√≥n completa\n' +
                '‚Ä¢ Mantenimiento correctivo');
        }

        if (question.match(/efecto.*hum.*alta|impacto.*hum.*alta/)) {
            return this.formatResponse('‚ö†Ô∏è IMPACTO DE HUMEDAD ALTA',
                'üîπ EFECTOS INMEDIATOS\n' +
                '‚Ä¢ Corrosi√≥n acelerada\n' +
                '‚Ä¢ Problemas el√©ctricos\n' +
                '‚Ä¢ Formaci√≥n de condensaci√≥n\n\n' +
                'üîπ DA√ëOS A LARGO PLAZO\n' +
                '‚Ä¢ Deterioro de aislamiento\n' +
                '‚Ä¢ Oxidaci√≥n de componentes\n' +
                '‚Ä¢ Crecimiento de moho\n\n' +
                'üîπ IMPACTO OPERATIVO\n' +
                '‚Ä¢ Fallos el√©ctricos\n' +
                '‚Ä¢ Degradaci√≥n de materiales\n' +
                '‚Ä¢ Mayor mantenimiento');
        }

        // Mantenimiento preventivo
        if (question.match(/cuando.*mantenimiento|mantenimiento.*preventivo/)) {
            return this.formatResponse('üîß GU√çA DE MANTENIMIENTO PREVENTIVO',
                'üîπ FRECUENCIA RECOMENDADA\n' +
                '‚Ä¢ Inspecci√≥n visual: Diaria\n' +
                '‚Ä¢ Verificaci√≥n b√°sica: Semanal\n' +
                '‚Ä¢ Mantenimiento completo: Mensual\n\n' +
                'üîπ INDICADORES PARA ADELANTAR\n' +
                '‚Ä¢ Vibraciones > 0.6 m/s¬≤\n' +
                '‚Ä¢ Temperatura > 70 ¬∞C\n' +
                '‚Ä¢ Humedad fuera de 40-55%\n\n' +
                'üîπ TAREAS PRINCIPALES\n' +
                '‚Ä¢ Lubricaci√≥n de componentes\n' +
                '‚Ä¢ Verificaci√≥n de alineaci√≥n\n' +
                '‚Ä¢ Limpieza de sistemas');
        }

        // M√∫ltiples problemas
        if (question.match(/vibra.*temp.*alta|temp.*vibra.*alta/)) {
            return this.formatResponse('‚ö†Ô∏è VIBRACI√ìN Y TEMPERATURA ALTAS',
                'üîπ ACCIONES INMEDIATAS\n' +
                '‚Ä¢ Reducir carga al 50%\n' +
                '‚Ä¢ Aumentar refrigeraci√≥n\n' +
                '‚Ä¢ Preparar parada si persiste\n\n' +
                'üîπ DIAGN√ìSTICO\n' +
                '‚Ä¢ Revisar rodamientos\n' +
                '‚Ä¢ Verificar lubricaci√≥n\n' +
                '‚Ä¢ Inspeccionar refrigeraci√≥n\n\n' +
                'üîπ PREVENCI√ìN\n' +
                '‚Ä¢ Mantenimiento completo\n' +
                '‚Ä¢ Mejorar monitoreo\n' +
                '‚Ä¢ Actualizar sistemas');
        }

        // Medidas preventivas para vibraci√≥n
        if (question.match(/medida.*prevent.*vibra|como.*evitar.*vibra|prevenir.*vibra/)) {
            return `PREVENCI√ìN DE VIBRACIONES
--------------------

1. MANTENIMIENTO REGULAR
- Lubricaci√≥n semanal
- Alineaci√≥n mensual
- Balanceo trimestral

2. MONITOREO
- Control diario de niveles
- Medici√≥n de temperatura
- An√°lisis de tendencias

3. INSPECCIONES
- Pernos y anclajes
- Estado de rodamientos
- Acoplamientos

‚úÖ RANGOS SEGUROS
‚Ä¢ Normal: < 0.7 m/s¬≤
‚Ä¢ Revisar: 0.6 - 0.7 m/s¬≤
‚Ä¢ Intervenir: > 0.7 m/s¬≤`;
        }

        // Prevenci√≥n de problemas de humedad
        if (question.match(/evitar.*humed|prevenir.*humed|como.*evitar.*hum/)) {
            return `PREVENCI√ìN DE HUMEDAD
--------------------

1. CONTROL AMBIENTAL
- Ventilaci√≥n adecuada
- Control de temperatura
- Monitoreo continuo

2. MANTENIMIENTO
- Revisi√≥n de sellos
- Limpieza de filtros
- Calibraci√≥n HVAC

3. INSPECCIONES
- Fugas de aire/agua
- Puntos de condensaci√≥n
- Estado de aislamiento

‚úÖ RANGOS √ìPTIMOS
‚Ä¢ Zona A: 40-55%
‚Ä¢ Zona B: 35-50%
‚Ä¢ Zona C: 45-60%`;
        }

        // Prevenci√≥n de fallos en sensores
        if (question.match(/prevenir.*fallo.*sensor|evitar.*fallo.*sensor|mantener.*sensor/)) {
            return `PREVENCI√ìN DE FALLOS - SENSORES
--------------------

1. MANTENIMIENTO PREVENTIVO
- Limpieza mensual
- Calibraci√≥n trimestral
- Verificaci√≥n conexiones

2. MONITOREO
- Registro de lecturas
- An√°lisis de desviaciones
- Verificaci√≥n cruzada

3. PROTECCI√ìN
- Protecci√≥n ambiental
- Respaldo el√©ctrico
- Redundancia cr√≠tica

‚ùó SE√ëALES DE ATENCI√ìN
‚Ä¢ Lecturas err√°ticas
‚Ä¢ Respuesta lenta
‚Ä¢ Desviaci√≥n progresiva`;
        }

        return null;
    }
}

class ValueEvaluationHandler extends ChatHandler {
    handle(question, readings) {
        const normalizedQuestion = question.toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "");

        // Evaluar vibraci√≥n espec√≠fica
        let vibMatch = normalizedQuestion.match(/vib_(\d{2}).*?(\d+\.?\d*)g?/);
        if (vibMatch) {
            const sensorId = `Vib_${vibMatch[1]}`;
            const value = parseFloat(vibMatch[2]);
            
            let evaluation = '';
            if (value > 0.9) {
                evaluation = `üî¥ VALOR CR√çTICO (${value} m/s¬≤)\n` +
                           `ESTADO\n` +
                           `‚Ä¢ Por encima del l√≠mite seguro (0.9 m/s¬≤)\n` +
                           `‚Ä¢ Requiere atenci√≥n inmediata\n\n` +
                           `‚ö†Ô∏è ACCIONES REQUERIDAS\n` +
                           `‚Ä¢ Reducir carga operativa\n` +
                           `‚Ä¢ Inspeccionar rodamientos\n` +
                           `‚Ä¢ Programar mantenimiento`;
            } else if (value > 0.7) {
                evaluation = `üü° VALOR ELEVADO (${value} m/s¬≤)\n` +
                           `ESTADO\n` +
                           `‚Ä¢ Por encima de lo normal (0.7 m/s¬≤)\n` +
                           `‚Ä¢ Requiere monitoreo cercano\n\n` +
                           `‚ö†Ô∏è RECOMENDACIONES\n` +
                           `‚Ä¢ Aumentar frecuencia de monitoreo\n` +
                           `‚Ä¢ Verificar lubricaci√≥n\n` +
                           `‚Ä¢ Planificar revisi√≥n preventiva`;
            } else {
                evaluation = `üü¢ VALOR NORMAL (${value} m/s¬≤)\n` +
                           `ESTADO\n` +
                           `‚Ä¢ Dentro del rango seguro (0.0 - 0.7 m/s¬≤)\n` +
                           `‚Ä¢ Operaci√≥n correcta\n\n` +
                           `‚ÑπÔ∏è MANTENIMIENTO\n` +
                           `‚Ä¢ Continuar monitoreo regular\n` +
                           `‚Ä¢ Mantener plan de lubricaci√≥n`;
            }
            
            return this.formatResponse(`üìä EVALUACI√ìN ${sensorId}`, evaluation);
        }

        // Evaluar temperatura espec√≠fica
        let tempMatch = normalizedQuestion.match(/temp.*?(\d+).*?c/i);
        if (tempMatch || normalizedQuestion.includes("temperatura") && normalizedQuestion.match(/(\d+).*?c/i)) {
            const value = parseFloat(tempMatch ? tempMatch[1] : normalizedQuestion.match(/(\d+).*?c/i)[1]);
            
            let evaluation = '';
            if (value > 85) {
                evaluation = `üö® TEMPERATURA CR√çTICA (${value}¬∞C)\n` +
                           `‚Ä¢ Por encima del l√≠mite seguro (85¬∞C)\n` +
                           `‚Ä¢ Riesgo de da√±o al equipo\n\n` +
                           `‚ùó ACCIONES REQUERIDAS\n` +
                           `1. Reducir carga operativa\n` +
                           `2. Verificar sistema de refrigeraci√≥n\n` +
                           `3. Preparar parada si persiste`;
            } else if (value > 75) {
                evaluation = `‚ö†Ô∏è TEMPERATURA ELEVADA (${value}¬∞C)\n` +
                           `‚Ä¢ Por encima de lo normal (75¬∞C)\n` +
                           `‚Ä¢ Requiere atenci√≥n\n\n` +
                           `üìå RECOMENDACIONES\n` +
                           `1. Verificar ventilaci√≥n\n` +
                           `2. Revisar refrigeraci√≥n\n` +
                           `3. Aumentar monitoreo`;
            } else if (value < 20) {
                evaluation = `‚ö†Ô∏è TEMPERATURA BAJA (${value}¬∞C)\n` +
                           `‚Ä¢ Por debajo de lo normal (20¬∞C)\n` +
                           `‚Ä¢ Verificar operaci√≥n\n\n` +
                           `üìå RECOMENDACIONES\n` +
                           `1. Verificar sensor\n` +
                           `2. Revisar carga de trabajo\n` +
                           `3. Monitorear rendimiento`;
            } else {
                evaluation = `‚úÖ TEMPERATURA NORMAL (${value}¬∞C)\n` +
                           `‚Ä¢ Dentro del rango √≥ptimo (20-75¬∞C)\n` +
                           `‚Ä¢ Operaci√≥n correcta\n\n` +
                           `üìå MANTENIMIENTO\n` +
                           `‚Ä¢ Continuar monitoreo regular\n` +
                           `‚Ä¢ Mantener ventilaci√≥n`;
            }
            
            return this.formatResponse('üå°Ô∏è EVALUACI√ìN TEMPERATURA', evaluation);
        }

        // Evaluar humedad espec√≠fica
        let humMatch = normalizedQuestion.match(/hum.*?(\d+).*?%/i);
        if (humMatch || normalizedQuestion.includes("humedad") && normalizedQuestion.match(/(\d+).*?%/i)) {
            const value = parseFloat(humMatch ? humMatch[1] : normalizedQuestion.match(/(\d+).*?%/i)[1]);
            
            let evaluation = '';
            if (value > 60) {
                evaluation = `üö® HUMEDAD ALTA (${value}%)\n` +
                           `‚Ä¢ Por encima del l√≠mite seguro (60%)\n` +
                           `‚Ä¢ Riesgo de condensaci√≥n\n\n` +
                           `‚ùó ACCIONES REQUERIDAS\n` +
                           `1. Aumentar ventilaci√≥n\n` +
                           `2. Verificar sellos\n` +
                           `3. Activar deshumidificaci√≥n`;
            } else if (value < 35) {
                evaluation = `üö® HUMEDAD BAJA (${value}%)\n` +
                           `‚Ä¢ Por debajo del l√≠mite seguro (35%)\n` +
                           `‚Ä¢ Riesgo de est√°tica\n\n` +
                           `‚ùó ACCIONES REQUERIDAS\n` +
                           `1. Verificar sistema HVAC\n` +
                           `2. Activar humidificadores\n` +
                           `3. Monitorear equipos sensibles`;
            } else {
                evaluation = `‚úÖ HUMEDAD NORMAL (${value}%)\n` +
                           `‚Ä¢ Dentro del rango √≥ptimo (35-60%)\n` +
                           `‚Ä¢ Operaci√≥n correcta\n\n` +
                           `üìå MANTENIMIENTO\n` +
                           `‚Ä¢ Continuar monitoreo regular\n` +
                           `‚Ä¢ Mantener ventilaci√≥n`;
            }
            
            return this.formatResponse('üíß EVALUACI√ìN HUMEDAD', evaluation);
        }

        // Evaluar normalidad general
        if (normalizedQuestion.match(/normal|correcto|bien|esta bien/)) {
            const criticalSensors = [];
            const warningSensors = [];
            const normalSensors = [];

            readings.filter(sensor => sensor.sensor_id.endsWith('01')).forEach(sensor => {
                if (sensor.unit === '¬∞C') {
                    if (sensor.value > 85) criticalSensors.push(`${sensor.sensor_id}: ${sensor.value.toFixed(1)}¬∞C`);
                    else if (sensor.value > 75) warningSensors.push(`${sensor.sensor_id}: ${sensor.value.toFixed(1)}¬∞C`);
                    else normalSensors.push(`${sensor.sensor_id}: ${sensor.value.toFixed(1)}¬∞C`);
                }
                else if (sensor.unit === 'm/s¬≤') {
                    if (sensor.value > 0.9) criticalSensors.push(`${sensor.sensor_id}: ${sensor.value.toFixed(2)} m/s¬≤`);
                    else if (sensor.value > 0.7) warningSensors.push(`${sensor.sensor_id}: ${sensor.value.toFixed(2)} m/s¬≤`);
                    else normalSensors.push(`${sensor.sensor_id}: ${sensor.value.toFixed(2)} m/s¬≤`);
                }
                else if (sensor.unit === '%') {
                    if (sensor.value > 60 || sensor.value < 35) criticalSensors.push(`${sensor.sensor_id}: ${sensor.value.toFixed(1)}%`);
                    else normalSensors.push(`${sensor.sensor_id}: ${sensor.value.toFixed(1)}%`);
                }
            });

            let evaluation = '';
            if (criticalSensors.length > 0) {
                evaluation += `üö® SENSORES CR√çTICOS\n`;
                criticalSensors.forEach(sensor => evaluation += `‚Ä¢ ${sensor}\n`);
                evaluation += `\n`;
            }
            if (warningSensors.length > 0) {
                evaluation += `‚ö†Ô∏è SENSORES EN ALERTA\n`;
                warningSensors.forEach(sensor => evaluation += `‚Ä¢ ${sensor}\n`);
                evaluation += `\n`;
            }
            if (normalSensors.length > 0) {
                evaluation += `‚úÖ SENSORES NORMALES\n`;
                normalSensors.forEach(sensor => evaluation += `‚Ä¢ ${sensor}\n`);
                evaluation += `\n`;
            }

            if (criticalSensors.length === 0 && warningSensors.length === 0) {
                evaluation += `üìå CONCLUSI√ìN\n‚Ä¢ Todos los valores est√°n dentro de rangos normales\n‚Ä¢ Continuar con monitoreo regular`;
            } else {
                evaluation += `‚ùó RECOMENDACI√ìN\n‚Ä¢ Revisar sensores marcados\n‚Ä¢ Tomar acciones correctivas`;
            }

            return this.formatResponse('üìä EVALUACI√ìN GENERAL', evaluation);
        }

        return super.handle(question, readings);
    }
}

class ActionHandler extends ChatHandler {
    handle(question, readings) {
        const normalizedQuestion = question.toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "");

        // Acciones para humedad baja
        if (normalizedQuestion.match(/que.*hacer.*hum.*baja|humedad.*baja/)) {
            return `PROTOCOLO PARA HUMEDAD BAJA
--------------------

ACCIONES INMEDIATAS
- Activar humidificadores
- Reducir ventilaci√≥n
- Verificar sellos

DIAGNOSTICO
- Medir flujos de aire
- Revisar fugas
- Verificar sistema HVAC

PREVENCION
- Instalar controladores
- Mejorar sellado
- Mantener sistema HVAC

[!] IMPORTANTE
- Si < 35%: Acci√≥n correctiva inmediata
- Rango √≥ptimo: 35-60%`;
        }

        // Acciones para temperatura alta
        if (normalizedQuestion.match(/que.*hacer.*temp.*alta|temperatura.*alta/)) {
            return `PROTOCOLO PARA TEMPERATURA ALTA
--------------------

ACCIONES INMEDIATAS
- Aumentar ventilaci√≥n
- Reducir carga operativa
- Verificar refrigeraci√≥n

DIAGNOSTICO
- Inspeccionar sistema de enfriamiento
- Verificar flujo de aire
- Revisar termostatos

PREVENCION
- Limpiar intercambiadores
- Calibrar sensores
- Optimizar ventilaci√≥n

[!] IMPORTANTE
- Si supera 85¬∞C: Parada inmediata
- Si supera 75¬∞C: Monitoreo continuo`;
        }

        // Acciones para vibraci√≥n alta
        if (normalizedQuestion.match(/que.*hacer.*vibra.*alta|vibra.*supera/)) {
            return `PROTOCOLO PARA VIBRACION ALTA
--------------------

ACCIONES INMEDIATAS
- Reducir velocidad al 50%
- Verificar carga
- Inspecci√≥n visual

DIAGNOSTICO
- Medir alineaci√≥n
- Revisar rodamientos
- Analizar espectro de vibraci√≥n

PREVENCION
- Programar mantenimiento
- Ajustar alineaci√≥n
- Balancear componentes

[!] IMPORTANTE
- Si persiste > 0.9 m/s¬≤: Parada inmediata
- Si contin√∫a > 0.7 m/s¬≤: Mantenimiento urgente`;
        }

        return super.handle(question, readings);
    }
}

module.exports = {
    ChatHandler,
    ValueEvaluationHandler,
    SpecificSensorHandler,
    TemperatureHandler,
    VibrationHandler,
    HumidityHandler,
    AlertHandler,
    StatusHandler,
    FAQHandler,
    ActionHandler
}; 